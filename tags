!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Axes3D	clustering.py	/^from mpl_toolkits.mplot3d import Axes3D$/;"	i
CALLER_EVENT	trace_parsing.py	/^CALLER_EVENT=""$/;"	v
CALLER_EVENT	trace_parsing.py	/^CALLER_EVENT=None$/;"	v
CALLER_EVENT_BASE	constants.py	/^CALLER_EVENT_BASE ="3000000"$/;"	v
CALLIN_EVENT	trace_parsing.py	/^CALLIN_EVENT=""$/;"	v
CALLIN_EVENT	trace_parsing.py	/^CALLIN_EVENT=None$/;"	v
CALLIN_EVENT_BASE	constants.py	/^CALLIN_EVENT_BASE ="3000010"$/;"	v
CALLSTACK_SIZE	constants.py	/^CALLSTACK_SIZE=10$/;"	v
CALL_NAMES	trace_parsing.py	/^CALL_NAMES={}$/;"	v
COUNTER_CALLS	trace_parsing.py	/^COUNTER_CALLS = None$/;"	v
COUNTER_TYPE_CALLS	trace_parsing.py	/^COUNTER_TYPE_CALLS = None$/;"	v
DBSCAN	clustering.py	/^from sklearn.cluster import DBSCAN$/;"	i
ELSE	constants.py	/^ELSE              ="elif {0}:\\n"$/;"	v
FORLOOP	constants.py	/^FORLOOP           ="for loop 1 to {0}: [{1}]\\n"$/;"	v
FUNC_MAP_FILE	constants.py	/^FUNC_MAP_FILE     ="functions.map"$/;"	v
IF	constants.py	/^IF                ="if {0}:\\n"$/;"	v
IMAGES	trace_parsing.py	/^IMAGES={}$/;"	v
MPICAL_EVENT	trace_parsing.py	/^MPICAL_EVENT=None$/;"	v
MPICAL_EVENT_BASE	constants.py	/^MPICAL_EVENT_BASE ="7000000"$/;"	v
MPILIN_EVENT	trace_parsing.py	/^MPILIN_EVENT=None$/;"	v
MPILIN_EVENT_BASE	constants.py	/^MPILIN_EVENT_BASE ="8000000"$/;"	v
MPI_CALLS	trace_parsing.py	/^MPI_CALLS={}$/;"	v
MPI_EVENT	trace_parsing.py	/^MPI_EVENT=None$/;"	v
MPI_EVENT_BASE	constants.py	/^MPI_EVENT_BASE    ="5000000"$/;"	v
MPI_LIB_FILE	constants.py	/^MPI_LIB_FILE      ="libmpi_injected.c"$/;"	v
MULTILOOP	constants.py	/^MULTILOOP         =1$/;"	v
Needed	utilities.py	/^from __future__ import print_function # Needed by the progress bar$/;"	i
PARAVER_EVENT	constants.py	/^PARAVER_EVENT     ="2"$/;"	v
PURELOOP	constants.py	/^PURELOOP          =0$/;"	v
Printer	utilities.py	/^class Printer():$/;"	c
RANDOM_SEED	constants.py	/^RANDOM_SEED=5748473$/;"	v
TAB	constants.py	/^TAB               =":  "$/;"	v
THREAD_DEPH	trace_parsing.py	/^THREAD_DEPH={}$/;"	v
Usage	struct_detection.py	/^def Usage(cmd):$/;"	f
__boundaries_sort	temp_matrix.py	/^    def __boundaries_sort(cls, tmat):$/;"	m	class:tmatrix	file:
__cuadra	temp_matrix.py	/^    def __cuadra(cls, mat):$/;"	m	class:tmatrix	file:
__get_common_cs	loop.py	/^    def __get_common_cs(self, cs1, cs2):$/;"	m	class:loop	file:
__get_matrix	temp_matrix.py	/^    def __get_matrix(self, callstacks_list):$/;"	m	class:tmatrix	file:
__init__	cluster.py	/^    def __init__(self, cluster, ranks):$/;"	m	class:cluster
__init__	loop.py	/^    def __init__(self, tmat, cstack, rank):$/;"	m	class:loop
__init__	temp_matrix.py	/^    def __init__(self, matrix, callstacks, transformations):$/;"	m	class:tmatrix
__init__	utilities.py	/^    def __init__(self, total):$/;"	m	class:progress_bar
__init__	utilities.py	/^    def __init__(self,data):                     $/;"	m	class:Printer
__loops_level_merge	cluster.py	/^    def __loops_level_merge(self, loops):$/;"	m	class:cluster	file:
__ranks_level_merge	cluster.py	/^    def __ranks_level_merge(self, ranks_loops):$/;"	m	class:cluster	file:
__submatrix	temp_matrix.py	/^    def __submatrix(self, mat):$/;"	m	class:tmatrix	file:
__substract_cs	loop.py	/^    def __substract_cs(self, cs1, cs2):$/;"	m	class:loop	file:
__time_mean_m	cluster.py	/^    def __time_mean_m(self):$/;"	m	class:cluster	file:
__times_m	cluster.py	/^    def __times_m(self):$/;"	m	class:cluster	file:
_cs_per_thread	callstack_alignement.py	/^_cs_per_thread=100$/;"	v
_empty_cell	constants.py	/^_empty_cell=0$/;"	v
_eps	constants.py	/^_eps              =0.05$/;"	v
_init_delta	delta_calculation.py	/^_init_delta=0.5$/;"	v
_inter_field_separator	constants.py	/^_inter_field_separator="#"$/;"	v
_intra_field_separator	constants.py	/^_intra_field_separator="|"$/;"	v
_min_samples	constants.py	/^_min_samples      =1$/;"	v
_upper_bound	delta_calculation.py	/^_upper_bound=1$/;"	v
_verbose	constants.py	/^    _verbose=False$/;"	v
_verbose	constants.py	/^    _verbose=True$/;"	v
_x_axis	constants.py	/^_x_axis           ="times"$/;"	v
_x_axis_label	constants.py	/^_x_axis_label     ="Number of occurrences"$/;"	v
_y_axis	constants.py	/^_y_axis           ="time_mean"$/;"	v
_y_axis_label	constants.py	/^_y_axis_label     ="Mean period bw occurrences"$/;"	v
_z_axis	constants.py	/^_z_axis           ="when_mean"$/;"	v
argcomplete	struct_detection.py	/^import argparse, argcomplete$/;"	i
argparse	struct_detection.py	/^import argparse, argcomplete$/;"	i
bar	utilities.py	/^from __future__ import print_function # Needed by the progress bar$/;"	i
by	utilities.py	/^from __future__ import print_function # Needed by the progress bar$/;"	i
cluster	cluster.py	/^class cluster (object):$/;"	c
cluster	clustering.py	/^from cluster import cluster$/;"	i
cluster	pseudocode_generator.py	/^from cluster import cluster$/;"	i
clustering	clustering.py	/^def clustering(cdist, ranks, show_plot):$/;"	f
constants	callstack_alignement.py	/^import constants$/;"	i
constants	callstack_distribution.py	/^import constants$/;"	i
constants	cluster.py	/^import constants$/;"	i
constants	clustering.py	/^import constants$/;"	i
constants	loop.py	/^import constants$/;"	i
constants	pseudocode_generator.py	/^import constants$/;"	i
constants	struct_detection.py	/^import constants$/;"	i
constants	temp_matrix.py	/^import constants$/;"	i
constants	trace_parsing.py	/^import constants$/;"	i
cs_uncommon_part	loop.py	/^def cs_uncommon_part(scalls):$/;"	f
filterIrrelevant	delta_calculation.py	/^def filterIrrelevant(cdist, total_time, bottom_bound):$/;"	f
format_nums	pseudocode_generator.py	/^    def format_nums(val):$/;"	f	function:print_matrix
fromCallstackList	temp_matrix.py	/^    def fromCallstackList(cls, callstacks_list):$/;"	m	class:tmatrix
getCallstacks	temp_matrix.py	/^    def getCallstacks(self):$/;"	m	class:tmatrix
getCost	delta_calculation.py	/^def getCost(lmbda, T, P, delta):$/;"	f
getCsContains	callstack_alignement.py	/^def getCsContains(vs, pivot):$/;"	f
getCsDistributions	callstack_distribution.py	/^def getCsDistributions(filecs):$/;"	f
getDelta	delta_calculation.py	/^def getDelta(cdist, total_time, bottom_bound):$/;"	f
getFirstLine	cluster.py	/^    def getFirstLine(self):$/;"	m	class:cluster
getFirstLine	loop.py	/^    def getFirstLine(self):$/;"	m	class:loop
getIteration	loop.py	/^    def getIteration(self, rank, it):$/;"	m	class:loop
getLastSc	loop.py	/^    def getLastSc(self, base):$/;"	m	class:loop
getLoop	cluster.py	/^    def getLoop(self):$/;"	m	class:cluster
getMatrix	temp_matrix.py	/^    def getMatrix(self):$/;"	m	class:tmatrix
getOccurrences	cluster.py	/^    def getOccurrences(self):$/;"	m	class:cluster
getPartitions	temp_matrix.py	/^    def getPartitions(self):$/;"	m	class:tmatrix
getPeriod	cluster.py	/^    def getPeriod(self):$/;"	m	class:cluster
getRandomIterations	cluster.py	/^    def getRandomIterations(self, n):$/;"	m	class:cluster
get_app_description	trace_parsing.py	/^def get_app_description(header):$/;"	f
get_app_time	trace_parsing.py	/^def get_app_time(trace):$/;"	f
get_call_names	trace_parsing.py	/^def get_call_names(trace):$/;"	f
get_callstack	callstack_alignement.py	/^def get_callstack(csfile):$/;"	f
get_callstacks	trace_parsing.py	/^def get_callstacks(trace, level, image_filter):$/;"	f
get_distances	callstack_distribution.py	/^def get_distances(times):$/;"	f
get_line_info	trace_parsing.py	/^def get_line_info(trace):$/;"	f
get_mpi_calls	trace_parsing.py	/^def get_mpi_calls(trace):$/;"	f
get_pcf_info	trace_parsing.py	/^def get_pcf_info(event_type, trace):$/;"	f
get_random_iters	pseudocode_generator.py	/^def get_random_iters(clusters, n_random_iterations):$/;"	f
get_ranks	loop.py	/^    def get_ranks(self):$/;"	m	class:loop
get_tmat	loop.py	/^    def get_tmat(self):$/;"	m	class:loop
getnMerges	cluster.py	/^    def getnMerges(self):$/;"	m	class:cluster
glob	struct_detection.py	/^        import glob$/;"	i
height_call	callstack_alignement.py	/^def height_call(callstack, call):$/;"	f
isTransformed	temp_matrix.py	/^    def isTransformed(self):$/;"	m	class:tmatrix
is_sublist	callstack_alignement.py	/^from utilities import is_sublist$/;"	i
is_sublist	utilities.py	/^def is_sublist(sl, ll):$/;"	f
json	trace_parsing.py	/^import sys, json, re, os$/;"	i
logging	struct_detection.py	/^import logging$/;"	i
logging	trace_parsing.py	/^import logging$/;"	i
loop	cluster.py	/^from loop import loop$/;"	i
loop	loop.py	/^class loop (object):$/;"	c
main	struct_detection.py	/^def main(argc, argv):$/;"	f
matplotlib	clustering.py	/^import matplotlib.pyplot as plt$/;"	i
merge	cluster.py	/^    def merge(self, ocluster):$/;"	m	class:cluster
merge	loop.py	/^    def merge(self, oloop):$/;"	m	class:loop
mergeS	loop.py	/^    def mergeS(self, subloop):$/;"	m	class:loop
merge_arrays	callstack_distribution.py	/^from utilities import merge_arrays$/;"	i
merge_arrays	utilities.py	/^def merge_arrays(a, b):$/;"	f
merge_clusters	pseudocode_generator.py	/^def merge_clusters(cluster_set, ranks):$/;"	f
multiprocessing	clustering.py	/^import sys, multiprocessing$/;"	i
next_letter	trace_parsing.py	/^def next_letter(letter):$/;"	f
normalize_data	clustering.py	/^def normalize_data(data):$/;"	f
np	cluster.py	/^import numpy as np$/;"	i
np	clustering.py	/^import numpy as np$/;"	i
np	loop.py	/^import numpy as np$/;"	i
np	pseudocode_generator.py	/^import numpy as np$/;"	i
np	temp_matrix.py	/^import numpy as np$/;"	i
numpy	callstack_distribution.py	/^import sys,numpy, random$/;"	i
numpy	delta_calculation.py	/^import numpy$/;"	i
numpy	struct_detection.py	/^import numpy$/;"	i
os	constants.py	/^import os$/;"	i
os	struct_detection.py	/^import sys, os$/;"	i
os	trace_parsing.py	/^import sys, json, re, os$/;"	i
parse_events	trace_parsing.py	/^def parse_events(events,image_filter):$/;"	f
pdb	cluster.py	/^import pdb$/;"	i
pdb	loop.py	/^import pdb$/;"	i
perform_alignement_st1	callstack_alignement.py	/^def perform_alignement_st1(vs):$/;"	f
perform_alignement_st2	callstack_alignement.py	/^def perform_alignement_st2(vs, ignored_indexes):$/;"	f
plot_data	clustering.py	/^def plot_data(data):$/;"	f
plt	clustering.py	/^import matplotlib.pyplot as plt$/;"	i
pretty_print	utilities.py	/^def pretty_print(pseudocode, trace_name):$/;"	f
print_function	utilities.py	/^from __future__ import print_function # Needed by the progress bar$/;"	i
print_iterations	utilities.py	/^def print_iterations(iterations):$/;"	f
print_matrix	pseudocode_generator.py	/^def print_matrix(matrix, infile):$/;"	f
progress	utilities.py	/^from __future__ import print_function # Needed by the progress bar$/;"	i
progress_bar	trace_parsing.py	/^from utilities import progress_bar$/;"	i
progress_bar	utilities.py	/^class progress_bar(object):$/;"	c
progress_by	utilities.py	/^    def progress_by(self, by):$/;"	m	class:progress_bar
random	callstack_distribution.py	/^import sys,numpy, random$/;"	i
random	cluster.py	/^import sys, random$/;"	i
random	loop.py	/^import sys, random$/;"	i
re	trace_parsing.py	/^import sys, json, re, os$/;"	i
recomputeFirstLine	loop.py	/^    def recomputeFirstLine(self, looplevel):$/;"	m	class:loop
searchMostFrequentRoutine	callstack_alignement.py	/^def searchMostFrequentRoutine(vs):$/;"	f
show	utilities.py	/^    def show(self):$/;"	m	class:progress_bar
show_clustering	clustering.py	/^def show_clustering(data, labels, core_samples_mask, n_clusters_):$/;"	f
str	cluster.py	/^    def str(self):$/;"	m	class:cluster
str	loop.py	/^    def str(self,block_tabs, base):$/;"	m	class:loop
sys	callstack_alignement.py	/^import sys$/;"	i
sys	callstack_distribution.py	/^import sys,numpy, random$/;"	i
sys	cluster.py	/^import sys, random$/;"	i
sys	clustering.py	/^import sys, multiprocessing$/;"	i
sys	delta_calculation.py	/^import sys$/;"	i
sys	loop.py	/^import sys, random$/;"	i
sys	pseudocode_generator.py	/^import sys$/;"	i
sys	struct_detection.py	/^import sys, os$/;"	i
sys	temp_matrix.py	/^import sys$/;"	i
sys	trace_parsing.py	/^import sys, json, re, os$/;"	i
tempfile	trace_parsing.py	/^        import tempfile$/;"	i
the	utilities.py	/^from __future__ import print_function # Needed by the progress bar$/;"	i
tmatrix	cluster.py	/^from temp_matrix import tmatrix$/;"	i
tmatrix	loop.py	/^from temp_matrix import tmatrix$/;"	i
tmatrix	temp_matrix.py	/^class tmatrix(object):$/;"	c
